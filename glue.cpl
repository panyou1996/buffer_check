#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <map>
#include <regex>
#include <iomanip>

struct Point {
    double x;
    double y;
};

using Polygon = std::vector<Point>;
using Polygons = std::vector<Polygon>;

std::map<std::string, Polygons> parseDocument(const std::string& filePath) {
    std::map<std::string, Polygons> data;
    std::ifstream file(filePath);
    std::string line;
    std::string currentKey;
    Polygon currentPoints;
    std::regex polygonPattern("'([^']*)'");
    std::regex pointPattern(R"((-?\d+\.?\d+)\s+(-?\d+\.?\d*)$)");

    while (std::getline(file, line)) {
        line = std::regex_replace(line, std::regex("^ +| +$|( ) +"), "$1"); // trim and remove extra spaces
        std::smatch match;

        if (std::regex_search(line, match, polygonPattern)) {
            if (!currentPoints.empty() && !currentKey.empty()) {
                data[currentKey].push_back(currentPoints);
                currentPoints.clear();
            }
            currentKey = match[1];
        } else if (line == currentKey) {
            if (!currentPoints.empty()) {
                data[currentKey].push_back(currentPoints);
                currentPoints.clear();
            }
        } else if (line.find("p ") == 0) {
            if (!currentPoints.empty() && !currentKey.empty()) {
                data[currentKey].push_back(currentPoints);
                currentPoints.clear();
            }
        } else if (std::regex_match(line, match, pointPattern)) {
            double x = std::stod(match[1]) / 10000.0;
            double y = std::stod(match[2]) / 10000.0;
            currentPoints.push_back({x, y});
        }
    }

    if (!currentPoints.empty() && !currentKey.empty()) {
        data[currentKey].push_back(currentPoints);
    }

    return data;
}

void outputGeoJSON(const std::map<std::string, Polygons>& data, const std::string& outputPath) {
    std::ofstream outputFile(outputPath);
    outputFile << std::fixed << std::setprecision(4);
    outputFile << "{\n\"type\": \"FeatureCollection\",\n\"features\": [\n";

    bool firstFeature = true;

    for (const auto& [key, polygons] : data) {
        for (const auto& polygon : polygons) {
            if (!firstFeature) {
                outputFile << ",\n";
            }
            firstFeature = false;
            outputFile << "{\n\"type\": \"Feature\",\n\"properties\": {\"name\": \"" << key << "\"},\n";
            outputFile << "\"geometry\": {\n\"type\": \"Polygon\",\n\"coordinates\": [[\n";
            for (size_t i = 0; i < polygon.size(); ++i) {
                outputFile << "[" << polygon[i].x << ", " << polygon[i].y << "]";
                if (i != polygon.size() - 1) {
                    outputFile << ",\n";
                }
            }
            outputFile << "\n]]\n}\n}";
        }
    }

    outputFile << "\n]\n}";
    outputFile.close();
}

int main() {
    std::string filePath = "/workspace/projs/dth/proj_lib/L13450163/check/run_dicectory/buffer_skill.drc.results";
    std::string outputPath = "output.geojson";
    
    auto data = parseDocument(filePath);
    std::cout << "Read polygons data finished" << std::endl;
    
    outputGeoJSON(data, outputPath);
    std::cout << "GeoJSON output finished: " << outputPath << std::endl;

    return 0;
}